apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: prometheus-stack
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://prometheus-community.github.io/helm-charts
    chart: kube-prometheus-stack
    targetRevision: 58.0.0
    helm:
      values: |
        crds:
          enabled: false
        prometheus-operator:
          enabled: true
        alertmanager:
          alertmanagerSpec:
            externalUrl: http://alertmanager.prtest.shop
          config:
            global:
              resolve_timeout: 5m
              slack_api_url_secret:
                name: alertmanager-slack-secret
                key: slackUrl
            route:
              receiver: 'slack-notifications'
              group_by: ['alertname', 'job']
              group_wait: 30s
              group_interval: 5m
              repeat_interval: 1h
            receivers:
            - name: 'slack-notifications'
              slack_configs:
              - channel: '#monitoring-alerts'
                send_resolved: true
                title: '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if .CommonLabels.alertname }}{{ .CommonLabels.alertname }}{{ else }}알림 발생{{ end }}'
                text: >-
                  {{ range .Alerts -}}
                  *요약 (Summary):* {{ .Annotations.summary }}
                  *상세 (Description):* {{ .Annotations.description }}
                  *발생 위치 (Instance):* `{{ .Labels.instance }}`
                  *로그 확인:* <{{ .GeneratorURL }}|Prometheus Graph>
                  ------------------------------------
                  {{ end }}
          service:
            type: ClusterIP
          ingress:
            enabled: true
            ingressClassName: nginx
            annotations:
              cert-manager.io/cluster-issuer: "letsencrypt-prod"
            hosts:
              - alertmanager.prtest.shop
            paths:
              - /
            tls:
              - secretName: alertmanager-prtest-shop-tls
                hosts:
                  - alertmanager.prtest.shop
        grafana:
          existingSecret: "grafana-admin-credentials"
          admin:
            existingSecret: "grafana-admin-credentials"
            userKey: adminUser
            passwordKey: adminPassword
          ingress:
            enabled: true
            ingressClassName: nginx
            annotations:
              cert-manager.io/cluster-issuer: "letsencrypt-prod"
            hosts:
              - grafana.prtest.shop
            tls:
              - secretName: grafana-prtest-shop-tls
                hosts:
                  - grafana.prtest.shop
        prometheus:
          prometheusSpec:
            externalUrl: http://prometheus.prtest.shop
          service:
            type: ClusterIP
          ingress:
            enabled: true
            ingressClassName: nginx
            annotations:
              cert-manager.io/cluster-issuer: "letsencrypt-prod"
            hosts:
              - prometheus.prtest.shop
            paths:
              - /
            tls:
              - secretName: prometheus-prtest-shop-tls
                hosts:
                  - prometheus.prtest.shop
  destination:
    namespace: monitoring
    server: https://kubernetes.default.svc
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true